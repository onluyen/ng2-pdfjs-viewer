import { EventEmitter, ElementRef } from '@angular/core';
import * as i0 from "@angular/core";
export declare class PdfJsViewerComponent {
    viewWordBar: ElementRef;
    loadingSpin: ElementRef;
    iframeDocx: ElementRef;
    iframePDF: ElementRef;
    viewerId: string;
    onBeforePrint: EventEmitter<any>;
    onAfterPrint: EventEmitter<any>;
    onDocumentLoad: EventEmitter<any>;
    onPageChange: EventEmitter<any>;
    viewerFolder: string;
    externalWindow: boolean;
    showSpinner: boolean;
    downloadFileName: string;
    openFile: boolean;
    download: boolean;
    startDownload: boolean;
    viewBookmark: boolean;
    print: boolean;
    startPrint: boolean;
    fullScreen: boolean;
    find: boolean;
    zoom: string;
    nameddest: string;
    pagemode: string;
    lastPage: boolean;
    rotatecw: boolean;
    rotateccw: boolean;
    cursor: string;
    scroll: string;
    spread: string;
    locale: string;
    useOnlyCssZoom: boolean;
    errorOverride: boolean;
    errorAppend: boolean;
    errorMessage: string;
    diagnosticLogs: boolean;
    externalWindowOptions: string;
    viewerTab: any;
    private _src;
    private _page;
    closeButton: boolean;
    closeFile: EventEmitter<boolean>;
    viewerUrl: any;
    set page(_page: number);
    get page(): number;
    set pdfSrc(_src: string | Blob | Uint8Array);
    get pdfSrc(): string | Blob | Uint8Array;
    get PDFViewerApplicationOptions(): any;
    get PDFViewerApplication(): any;
    receiveMessage(viewerEvent: any): void;
    downloadFile(blobUrl: any, filename: any): void;
    downloadWordFile(): void;
    closeWordFile(): void;
    isValidFile(str: any): boolean;
    getUrlFile(): string;
    getFileExtension(filename: any): string;
    ngOnInit(): void;
    refresh(): void;
    private loadPdf;
    static ɵfac: i0.ɵɵFactoryDeclaration<PdfJsViewerComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<PdfJsViewerComponent, "ng2-pdfjs-viewer", never, { "viewerId": { "alias": "viewerId"; "required": false; }; "viewerFolder": { "alias": "viewerFolder"; "required": false; }; "externalWindow": { "alias": "externalWindow"; "required": false; }; "showSpinner": { "alias": "showSpinner"; "required": false; }; "downloadFileName": { "alias": "downloadFileName"; "required": false; }; "openFile": { "alias": "openFile"; "required": false; }; "download": { "alias": "download"; "required": false; }; "startDownload": { "alias": "startDownload"; "required": false; }; "viewBookmark": { "alias": "viewBookmark"; "required": false; }; "print": { "alias": "print"; "required": false; }; "startPrint": { "alias": "startPrint"; "required": false; }; "fullScreen": { "alias": "fullScreen"; "required": false; }; "find": { "alias": "find"; "required": false; }; "zoom": { "alias": "zoom"; "required": false; }; "nameddest": { "alias": "nameddest"; "required": false; }; "pagemode": { "alias": "pagemode"; "required": false; }; "lastPage": { "alias": "lastPage"; "required": false; }; "rotatecw": { "alias": "rotatecw"; "required": false; }; "rotateccw": { "alias": "rotateccw"; "required": false; }; "cursor": { "alias": "cursor"; "required": false; }; "scroll": { "alias": "scroll"; "required": false; }; "spread": { "alias": "spread"; "required": false; }; "locale": { "alias": "locale"; "required": false; }; "useOnlyCssZoom": { "alias": "useOnlyCssZoom"; "required": false; }; "errorOverride": { "alias": "errorOverride"; "required": false; }; "errorAppend": { "alias": "errorAppend"; "required": false; }; "errorMessage": { "alias": "errorMessage"; "required": false; }; "diagnosticLogs": { "alias": "diagnosticLogs"; "required": false; }; "externalWindowOptions": { "alias": "externalWindowOptions"; "required": false; }; "closeButton": { "alias": "closeButton"; "required": false; }; "page": { "alias": "page"; "required": false; }; "pdfSrc": { "alias": "pdfSrc"; "required": false; }; }, { "onBeforePrint": "onBeforePrint"; "onAfterPrint": "onAfterPrint"; "onDocumentLoad": "onDocumentLoad"; "onPageChange": "onPageChange"; "closeFile": "closeFile"; }, never, never, false, never>;
}
